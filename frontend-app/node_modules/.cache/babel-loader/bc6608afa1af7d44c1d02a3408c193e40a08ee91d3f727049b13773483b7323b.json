{"ast":null,"code":"// import { stripeKey, stripeOptions } from './stripeConfig.json'\nimport { Card, createToken } from 'vue-stripe-elements-plus';\nexport default {\n  data() {\n    return {\n      complete: false,\n      stripeOptions: {\n        // see https://stripe.com/docs/stripe.js#element-options for details\n      }\n    };\n  },\n  components: {\n    Card\n  },\n  methods: {\n    pay() {\n      // createToken returns a Promise which resolves in a result object with\n      // either a token or an error key.\n      // See https://stripe.com/docs/api#tokens for the token object.\n      // See https://stripe.com/docs/api#errors for the error object.\n      // More general https://stripe.com/docs/stripe.js#stripe-create-token.\n      createToken().then(data => console.log(data.token));\n    }\n  }\n};\n// import axios from '@/axios';\n\n// export default {\n//     // mounted() {\n//     //     this.getStripe();\n//     // },\n//     data() {\n//         return {\n//             userID: \"\",\n//             shipmentToPay: {},\n//             checkoutStart: false,\n//             orderPayed: false\n//         }\n//     },\n//     methods: {\n//         async getStripe() {\n//             const response = await axios.get(\"/stripe\");\n//             this.pageCheckout = response.data;\n//             console.log(response.data);\n//         },\n//         async createToken() {\n//             stripe.createToken(cardElement).then(function(result) {\n//                 if(typeof result.error != 'undefined') {\n//                     // document.getElementById(\"pay-btn\").disabled = false;\n//                     alert(result.error.message);\n//                 }\n//                 /* creating token success */\n//                 if(typeof result.token != 'undefined') {\n//                     stripeTokenId = result.token.id;\n//                     // document.getElementById('checkout-form').submit();\n//                 }\n//             });\n//         }\n//         // async listShipments() {\n//         //     const user = await axios.get(\"http://localhost:8000/api/user\", {\n//         //         headers: {\n//         //             'Authorization': `Bearer ${localStorage.getItem('token')}`\n//         //         }\n//         //     });\n//         //     this.userID = user.data.id;\n//         //     const payload = { ID_USER: this.userID };\n//         //     const headers = { 'Authorization': `Bearer ${localStorage.getItem('token')}` };\n//         //     this.userShipments = await axios.post(\"/shipments-by-user\", payload, { headers });\n//         //     this.userShipments = this.userShipments.data;\n//         //     console.log(this.userID, this.userShipments);\n//         // }\n//     //     validateInput() {\n//     //         const errors = {};\n//     //         if(!this.senderCode) errors.senderCode = 'The Sender Zip Code is required!';\n//     //         if(!this.receiverCode) errors.receiverCode = 'The Receiver Zip Code is required!';\n//     //         if(!this.weight) errors.weight = 'The Weight is required!';\n//     //         if(!this.length) errors.length = 'The Length is required!';\n//     //         if(!this.width) errors.width = 'The Width is required!';\n//     //         if(!this.height) errors.height = 'The Height is required!';\n//     //         return errors;\n//     //     },\n//     //     async addShipment() {\n//     //         const errors = this.validateInput();\n//     //         const currentDate = new Date().setDate(new Date().getMinutes());\n//     //         var userID = null;\n//     //         if(Object.keys(errors).length > 0) {\n//     //             this.errors = errors;\n//     //             return;\n//     //         }\n//     //         try {\n//     //             if(localStorage.getItem('token')) {\n//     //                 if(currentDate > localStorage.getItem('tokenExpireAt')) {\n//     //                     localStorage.removeItem('token');\n//     //                     localStorage.removeItem('tokenExpireAt');\n//     //                     this.$router.push('/login');\n//     //                 }\n//     //                 else {\n//     //                     const user = await axios.get(\"http://localhost:8000/api/user\", {\n//     //                         headers: {\n//     //                             'Authorization': `Bearer ${localStorage.getItem('token')}`\n//     //                         }\n//     //                     });\n//     //                     userID = user.data.id;\n//     //                     console.log(\"userID\", userID);\n//     //                 }\n//     //             }\n//     //             const response = await axios.post(\"/insert-shipment\", {\n//     //                 SENDER_CODE: this.senderCode,\n//     //                 RECEIVER_CODE: this.receiverCode,\n//     //                 DETAILS: JSON.stringify({\n//     //                     weight: this.weight,\n//     //                     length: this.length,\n//     //                     width: this.width,\n//     //                     height: this.height,\n//     //                     volume: (this.length * this.width * this.height) / 5000\n//     //                 }),\n//     //                 ID_USER: userID\n//     //             });\n//     //             if(userID) {\n//     //                 const payload = { ID_USER: userID };\n//     //                 const headers = { 'Authorization': `Bearer ${localStorage.getItem('token')}` };\n//     //                 const userShipments = await axios.post(\"/shipments-by-user\", payload, { headers });\n//     //                 console.log(userShipments);\n//     //                 this.$router.push({name: 'myShipments', params: { userShipments: userShipments, userID: userID }});\n\n//     //             }\n//     //             else \n//     //                 this.$router.push('/');\n//     //         }\n//     //         catch(error) {\n//     //             console.error(\"An error occurred during the insert shipment: \", error);\n//     //         }\n//     //     }\n//     }\n// }","map":{"version":3,"names":["Card","createToken","data","complete","stripeOptions","components","methods","pay","then","console","log","token"],"sources":["/Applications/MAMP/htdocs/laravel/arsil-11/frontend/src/components/CheckOut.vue"],"sourcesContent":["<template>\n    <h1>Checkout</h1>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <!-- {{ this.$route.params.ORDER_NUMBER }} <br> -->\n                SENDER_CODE: {{ this.$route.params.SENDER_CODE }} <br>\n                RECEIVER_CODE: {{ this.$route.params.RECEIVER_CODE }} <br>\n                weight: {{ this.$route.params.weight }} <br>\n                length: {{ this.$route.params.length }} <br>\n                width: {{ this.$route.params.width }} <br>\n                height: {{ this.$route.params.height }} <br>\n                volume: {{ this.$route.params.volume }} <br>\n                PRICE: {{ this.$route.params.PRICE }} <br>\n                COURIER: {{ this.$route.params.COURIER }} <br>\n                ID_USER: {{ this.$route.params.ID_USER }} <br>\n                <!-- <ul class=\"well titles\">\n                    <li>\n                        <span class=\"order-number\">#</span>\n                        <span class=\"sender-code\">SENDER</span>\n                        <span class=\"receiver-code\">RECEIVER</span>\n                        <span class=\"price\">PRICE</span>\n                        <span class=\"courier\">COURIER</span>\n                        <span class=\"created-at\">Created At</span>\n                    </li>\n                </ul> \n                <ul class=\"well\" v-for=\"item in userShipments\">\n                    <li>\n                        <span class=\"order-number\">{{ item.ORDER_NUMBER }}</span>\n                        <span class=\"sender-code\">{{ item.SENDER_CODE }}</span>\n                        <span class=\"receiver-code\">{{ item.RECEIVER_CODE }}</span>\n                        <span class=\"price\">{{ item.PRICE }}</span>\n                        <span class=\"courier\">{{ item.COURIER }}</span>\n                        <span class=\"created-at\">{{ item.created_at.split(\"T\")[0] }}</span>\n                    </li>\n                </ul>     -->\n            </div>\n        </div>\n    </div>\n    <div v-if=\"this.$route.params.PRICE\">\n        <div class=\"form-container\">\n            <!-- <form @submit.prevent=\"getStripe\" class=\"stripe\"> -->\n                <!-- <input class=\"input-field\" type=\"text\" v-model=\"senderCode\" placeholder=\"Sender Zip Code\" required />\n                <p v-if=\"errors.senderCode\" class=\"errors\">{{ errors.senderCode }}</p>\n                <input class=\"input-field\" type=\"text\" v-model=\"receiverCode\" placeholder=\"Receiver Zip Code\" required />\n                <p v-if=\"errors.receiverCode\" class=\"errors\">{{ errors.receiverCode }}</p>\n                <input class=\"input-field\" type=\"number\" v-model=\"weight\" placeholder=\"Weight in kg\" required />\n                <p v-if=\"errors.weight\" class=\"errors\">{{ errors.weight }}</p>\n                <input class=\"input-field\" type=\"number\" v-model=\"length\" placeholder=\"Length in cm\" required />\n                <p v-if=\"errors.length\" class=\"errors\">{{ errors.length }}</p>\n                <input class=\"input-field\" type=\"number\" v-model=\"width\" placeholder=\"Width in cm\" required />\n                <p v-if=\"errors.width\" class=\"errors\">{{ errors.width }}</p>\n                <input class=\"input-field\" type=\"number\" v-model=\"height\" placeholder=\"Height in cm\" required />\n                <p v-if=\"errors.height\" class=\"errors\">{{ errors.height }}</p> -->\n                <!-- <button type=\"submit\">Checkout</button> -->\n            <!-- </form> -->\n            <h2>Please give us your payment details:</h2>\n                <card class='stripe-card'\n                    :class='{ complete }'\n                    stripe='pk_test_51QzlmzRcuBqeHh0iYtJBhCHpDDXQKaHrzv9809lrcGbeLGelkVKVc4ODtApxnJM5RO72dHrw9hPAnAt8llKQVDL500mL1gKk60'\n                    :options='stripeOptions'\n                    @change='complete = $event.complete'\n                />\n            <button class='pay-with-stripe' @click='pay' :disabled='!complete'>Pay with credit card</button>\n        </div>\n    </div>\n</template>\n\n<style>\n    .well {\n        display: flex;\n        flex-direction: column;\n        flex-wrap: nowrap;\n        justify-content: center;\n        align-items: center;\n        margin: 5px;\n        padding: 2px;\n    }\n    .well li {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: space-around;\n        align-items: center;\n        gap: 10px;\n        flex: 0 0 95%;\n        max-width: 95%;\n        width: 95%;\n        margin-bottom: 5px;\n    }\n    .well li span {\n        width: 15%;\n        flex: 0 0 15%;\n        border: 1px solid #333333;\n        min-height: 21px;\n        font-size: 15px;\n    }\n    .titles li span {\n        font-weight: 700;\n        border-bottom: 1px solid #333333;\n        border-top: 1px solid transparent;\n        border-left: 1px solid transparent;\n        border-right: 1px solid transparent;\n    }\n    .stripe-card {\n        width: 300px;\n        border: 1px solid grey;\n    }\n    .stripe-card.complete {\n        border-color: green;\n    }\n</style>\n\n<script>\n// import { stripeKey, stripeOptions } from './stripeConfig.json'\nimport { Card, createToken } from 'vue-stripe-elements-plus'\n\nexport default {\n  data () {\n    return {\n      complete: false,\n      stripeOptions: {\n        // see https://stripe.com/docs/stripe.js#element-options for details\n      }\n    }\n  },\n\n  components: { Card },\n\n  methods: {\n    pay () {\n      // createToken returns a Promise which resolves in a result object with\n      // either a token or an error key.\n      // See https://stripe.com/docs/api#tokens for the token object.\n      // See https://stripe.com/docs/api#errors for the error object.\n      // More general https://stripe.com/docs/stripe.js#stripe-create-token.\n      createToken().then(data => console.log(data.token))\n    }\n  }\n}\n// import axios from '@/axios';\n\n// export default {\n//     // mounted() {\n//     //     this.getStripe();\n//     // },\n//     data() {\n//         return {\n//             userID: \"\",\n//             shipmentToPay: {},\n//             checkoutStart: false,\n//             orderPayed: false\n//         }\n//     },\n//     methods: {\n//         async getStripe() {\n//             const response = await axios.get(\"/stripe\");\n//             this.pageCheckout = response.data;\n//             console.log(response.data);\n//         },\n//         async createToken() {\n//             stripe.createToken(cardElement).then(function(result) {\n//                 if(typeof result.error != 'undefined') {\n//                     // document.getElementById(\"pay-btn\").disabled = false;\n//                     alert(result.error.message);\n//                 }\n//                 /* creating token success */\n//                 if(typeof result.token != 'undefined') {\n//                     stripeTokenId = result.token.id;\n//                     // document.getElementById('checkout-form').submit();\n//                 }\n//             });\n//         }\n//         // async listShipments() {\n//         //     const user = await axios.get(\"http://localhost:8000/api/user\", {\n//         //         headers: {\n//         //             'Authorization': `Bearer ${localStorage.getItem('token')}`\n//         //         }\n//         //     });\n//         //     this.userID = user.data.id;\n//         //     const payload = { ID_USER: this.userID };\n//         //     const headers = { 'Authorization': `Bearer ${localStorage.getItem('token')}` };\n//         //     this.userShipments = await axios.post(\"/shipments-by-user\", payload, { headers });\n//         //     this.userShipments = this.userShipments.data;\n//         //     console.log(this.userID, this.userShipments);\n//         // }\n//     //     validateInput() {\n//     //         const errors = {};\n//     //         if(!this.senderCode) errors.senderCode = 'The Sender Zip Code is required!';\n//     //         if(!this.receiverCode) errors.receiverCode = 'The Receiver Zip Code is required!';\n//     //         if(!this.weight) errors.weight = 'The Weight is required!';\n//     //         if(!this.length) errors.length = 'The Length is required!';\n//     //         if(!this.width) errors.width = 'The Width is required!';\n//     //         if(!this.height) errors.height = 'The Height is required!';\n//     //         return errors;\n//     //     },\n//     //     async addShipment() {\n//     //         const errors = this.validateInput();\n//     //         const currentDate = new Date().setDate(new Date().getMinutes());\n//     //         var userID = null;\n//     //         if(Object.keys(errors).length > 0) {\n//     //             this.errors = errors;\n//     //             return;\n//     //         }\n//     //         try {\n//     //             if(localStorage.getItem('token')) {\n//     //                 if(currentDate > localStorage.getItem('tokenExpireAt')) {\n//     //                     localStorage.removeItem('token');\n//     //                     localStorage.removeItem('tokenExpireAt');\n//     //                     this.$router.push('/login');\n//     //                 }\n//     //                 else {\n//     //                     const user = await axios.get(\"http://localhost:8000/api/user\", {\n//     //                         headers: {\n//     //                             'Authorization': `Bearer ${localStorage.getItem('token')}`\n//     //                         }\n//     //                     });\n//     //                     userID = user.data.id;\n//     //                     console.log(\"userID\", userID);\n//     //                 }\n//     //             }\n//     //             const response = await axios.post(\"/insert-shipment\", {\n//     //                 SENDER_CODE: this.senderCode,\n//     //                 RECEIVER_CODE: this.receiverCode,\n//     //                 DETAILS: JSON.stringify({\n//     //                     weight: this.weight,\n//     //                     length: this.length,\n//     //                     width: this.width,\n//     //                     height: this.height,\n//     //                     volume: (this.length * this.width * this.height) / 5000\n//     //                 }),\n//     //                 ID_USER: userID\n//     //             });\n//     //             if(userID) {\n//     //                 const payload = { ID_USER: userID };\n//     //                 const headers = { 'Authorization': `Bearer ${localStorage.getItem('token')}` };\n//     //                 const userShipments = await axios.post(\"/shipments-by-user\", payload, { headers });\n//     //                 console.log(userShipments);\n//     //                 this.$router.push({name: 'myShipments', params: { userShipments: userShipments, userID: userID }});\n                    \n//     //             }\n//     //             else \n//     //                 this.$router.push('/');\n//     //         }\n//     //         catch(error) {\n//     //             console.error(\"An error occurred during the insert shipment: \", error);\n//     //         }\n//     //     }\n//     }\n// }\n</script>"],"mappings":"AAkHA;AACA,SAASA,IAAI,EAAEC,WAAU,QAAS,0BAAyB;AAE3D,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,QAAQ,EAAE,KAAK;MACfC,aAAa,EAAE;QACb;MAAA;IAEJ;EACF,CAAC;EAEDC,UAAU,EAAE;IAAEL;EAAK,CAAC;EAEpBM,OAAO,EAAE;IACPC,GAAEA,CAAA,EAAK;MACL;MACA;MACA;MACA;MACA;MACAN,WAAW,CAAC,CAAC,CAACO,IAAI,CAACN,IAAG,IAAKO,OAAO,CAACC,GAAG,CAACR,IAAI,CAACS,KAAK,CAAC;IACpignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}